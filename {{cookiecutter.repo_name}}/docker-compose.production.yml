version: '2'

services:
    django:
        build:
            context: .
            dockerfile: Dockerfile-django.production
        container_name: {{ cookiecutter.repo_name }}_django
        restart: unless-stopped
        entrypoint: /usr/bin/wait-for-it.sh postgres:5432 -t 60 --
        command: /usr/local/bin/gunicorn {{ cookiecutter.repo_name }}.wsgi:application --workers 2 --bind :80
        volumes:
            - "./static/public:/files/public:ro"
            - "/volumes/docker-nginx/files/{{ cookiecutter.repo_name }}/media:/files/media"
            - "/volumes/docker-nginx/files/{{ cookiecutter.repo_name }}/static:/files/static"
            - "/var/log/{{ cookiecutter.repo_name }}:/var/log/{{ cookiecutter.repo_name }}"
        networks:
            - default
            - nginx
        depends_on:
            - postgres
            - redis

    postgres:
        image: "postgres:9.6.1"
        restart: unless-stopped
        volumes:
            - "/var/lib/docker-{{ cookiecutter.repo_name }}/postgres:/var/lib/postgresql/data"

    celery:
        build:
            context: .
            dockerfile: Dockerfile-django.production
        restart: unless-stopped
        entrypoint: /usr/bin/wait-for-it.sh postgres:5432 -t 60 --
        volumes:
            - "/var/log/{{ cookiecutter.repo_name }}:/var/log/{{ cookiecutter.repo_name }}"
        depends_on:
            - postgres
            - redis
        command: celery worker --app {{ cookiecutter.repo_name }} --autoscale 10,3 --loglevel INFO

    celery_beat:
        build:
            context: .
            dockerfile: Dockerfile-django.production
        container_name: {{ cookiecutter.repo_name }}_celery_beat
        restart: unless-stopped
        volumes:
            - "/var/lib/docker-{{ cookiecutter.repo_name }}/celery:/app/celery"
            - "/var/log/{{ cookiecutter.repo_name }}:/var/log/{{ cookiecutter.repo_name }}"
        depends_on:
            - redis
        # Disable pidfile by specifying an empty one. We used fixed container_name which provides single-running-process
        # guarantee and the lack of pidfile ensures that Celery Beat starts even if the Docker container was killed and
        # then restarted (in which case the pidfile would still be present).
        command: celery beat --app {{ cookiecutter.repo_name }} --loglevel INFO --pidfile= --schedule /app/celery/celerybeat-schedule
    redis:
        image: "redis:3.2.6"
        restart: unless-stopped
        command: redis-server --appendonly yes
        volumes:
            - "/var/lib/docker-{{ cookiecutter.repo_name }}/redis:/data"

networks:
    nginx:
        external: true
