version: '2'

services:
    django:
        build:
            context: .
            dockerfile: Dockerfile-django
        container_name: {{ cookiecutter.repo_name }}_django
        entrypoint: /usr/bin/wait-for-it.sh postgres:5432 -t 60 --
        command: python manage.py runserver 0.0.0.0:8000
        ports:
            - "8000:8000"
        environment:
            - PYTHONUNBUFFERED=0
        volumes:
            - "./static/public:/files/public:ro"
            - "./static/assets:/files/assets:ro"
            - "./{{ cookiecutter.repo_name }}:/app/{{ cookiecutter.repo_name }}"
            - "./.data-media:/files/media"
            - "./.data-ipython:/root/.ipython"
            # Add static files to the container to get the translations
            - "./static:/app/static:ro"
        depends_on:
            - node
            - postgres
            - redis

    postgres:
        image: "postgres:9.6.1"
        volumes:
            - "./.data-postgres:/var/lib/postgresql/data"
        environment:
            - POSTGRES_USER={{ cookiecutter.repo_name }}
            - POSTGRES_PASSWORD={{ cookiecutter.repo_name }}

    celery:
        build:
            context: .
            dockerfile: Dockerfile-django
        entrypoint: /usr/bin/wait-for-it.sh postgres:5432 -t 60 --
        volumes:
            - "./{{ cookiecutter.repo_name }}:/app/{{ cookiecutter.repo_name }}:ro"
        depends_on:
            - postgres
            - redis
        command: celery worker --app {{ cookiecutter.repo_name }} --autoscale 10,3 --loglevel INFO

    celery_beat:
        build:
            context: .
            dockerfile: Dockerfile-django
        volumes:
            - "./{{ cookiecutter.repo_name }}:/app/{{ cookiecutter.repo_name }}:ro"
            - ".data-celery/:/app/celery"
        depends_on:
            - redis
        # Disable pidfile by specifying an empty one. We used fixed container_name which provides single-running-process
        # guarantee and the lack of pidfile ensures that Celery Beat starts even if the Docker container was killed and
        # then restarted (in which case the pidfile would still be present).
        command: celery beat --app {{ cookiecutter.repo_name }} --loglevel INFO --pidfile= --schedule /app/celery/celerybeat-schedule

    redis:
        image: "redis:3.2.6"

    node:
        build:
            context: .
            dockerfile: Dockerfile-node
        volumes:
            - "./static/public:/static/public"
            - "./static/assets:/static/assets:ro"
            - "./static/src:/static/src:ro"
        command: npm run dev
